// Edit your app's name below
def APP_NAME = 'greenlight'
def ANGULAR_APP_NAME = 'greenlight-angular'

// Wait timeout in minutes
def WAIT_TIMEOUT = 25

// Edit your environment TAG names below
def TAG_NAMES = ['dev', 'test', 'prod']

// You shouldn't have to edit these if you're following the conventions
def BUILD_CONFIG = "${APP_NAME}-build"
def IMAGESTREAM_NAME = APP_NAME
def ANGULAR_BUILD_CONFIG = ANGULAR_APP_NAME
def RUNTIME_BUILD_CONFIG = 'caddy-runtime'

// Get an image's hash tag
String getImageTagHash(String imageName, String tag = "") {

  if(!tag?.trim()) {
    tag = "latest"
  }

  def istag = openshift.raw("get istag ${imageName}:${tag} -o template --template='{{.image.dockerImageReference}}'")
  return istag.out.tokenize('@')[1].trim()
}

node {
  stage("Build ${ANGULAR_BUILD_CONFIG}") {
    script {
      openshift.withCluster() {
        openshift.withProject() {

          echo "Building the application artifacts ..."
          def build = openshift.selector("bc", "${ANGULAR_BUILD_CONFIG}")
          build.startBuild()

          timeout(WAIT_TIMEOUT) {
            // Wait for the build to complete ...
            // This section will exit after the build completes.
            echo "Waiting for builds to complete ..."
            build.withEach {
              // untilEach and watch - do not support watching multiple named resources,
              // so we have to feed it one at a time.
              it.untilEach(1) {
                  echo "${it.object().status.phase} - ${it.name()}"
                  return (it.object().status.phase == "Complete")
              }
            }
          }
        }
      }
    }
  }

  // Build the runtime image, if you are not using an off the shelf one.
  stage("Build ${RUNTIME_BUILD_CONFIG}") {
    script {
      openshift.withCluster() {
        openshift.withProject() {

          echo "Building the ${RUNTIME_BUILD_CONFIG} image ..."
          def build = openshift.selector("bc", "${RUNTIME_BUILD_CONFIG}")
          build.startBuild()

          timeout(WAIT_TIMEOUT) {
            // Wait for the build to complete ...
            // This section will exit after the build completes.
            echo "Waiting for builds to complete ..."
            build.withEach {
              // untilEach and watch - do not support watching multiple named resources,
              // so we have to feed it one at a time.
              it.untilEach(1) {
                  echo "${it.object().status.phase} - ${it.name()}"
                  return (it.object().status.phase == "Complete")
              }
            }
          }
        }
      }
    }
  }

  // Copy the artifacts into the run-time image
  stage("Build ${BUILD_CONFIG}") {
    script {
      openshift.withCluster() {
        openshift.withProject() {

          echo "Building ${BUILD_CONFIG} ..."
          def build = openshift.selector("bc", "${BUILD_CONFIG}")
          build.startBuild().logs("-f")

          timeout(WAIT_TIMEOUT) {
            // Wait for the build to complete ...
            // This section will exit after the build completes.
            echo "Waiting for builds to complete ..."
            build.withEach {
              // untilEach and watch - do not support watching multiple named resources,
              // so we have to feed it one at a time.
              it.untilEach(1) {
                  echo "${it.object().status.phase} - ${it.name()}"
                  return (it.object().status.phase == "Complete")
              }
            }
          }
        }
      }
    }
  }

  stage("Deploy ${TAG_NAMES[0]}") {
    script {
      openshift.withCluster() {
        openshift.withProject() {

          echo "Tagging ${IMAGESTREAM_NAME} for deployment to ${TAG_NAMES[0]} ..."

          // Don't tag with BUILD_ID so the pruner can do it's job; it won't delete tagged images.
          // Tag the images for deployment based on the image's hash
          def IMAGE_HASH = getImageTagHash("${IMAGESTREAM_NAME}")
          echo "IMAGE_HASH: ${IMAGE_HASH}"
          openshift.tag("${IMAGESTREAM_NAME}@${IMAGE_HASH}", "${IMAGESTREAM_NAME}:${TAG_NAMES[0]}")
        }
      }
    }
  }
}
